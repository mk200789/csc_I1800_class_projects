import numpy as np
import copy
from prettytable import PrettyTable

def extractData():
	#Returns a list of input letters and its corresponding output and the character
	input_raw_bipolar_vals = []
	temp = []

	file = open('input3.txt', 'r')

	for char in file.read():
		if char == "\n":
			pass
		if char == "_":
			temp.append(-1)
		if char == "x":
			temp.append(1)
		if char != "_" and char != "x":
			if char == "A":
				temp.append(1)
				input_raw_bipolar_vals.append((np.array(temp), np.array([1, -1, -1, -1 ,-1 ,-1, -1]), char))
				temp = []
			if char == "B":
				temp.append(1)
				input_raw_bipolar_vals.append((np.array(temp), np.array([-1, 1, -1, -1 ,-1 ,-1, -1]), char))
				temp = []
			if char == "C":
				temp.append(1)
				input_raw_bipolar_vals.append((np.array(temp), np.array([-1, -1, 1, -1 ,-1 ,-1, -1]), char))
				temp = []
			if char == "D":
				temp.append(1)
				input_raw_bipolar_vals.append((np.array(temp), np.array([-1, -1, -1, 1 ,-1 ,-1, -1]), char))
				temp = []
			if char == "E":
				temp.append(1)
				input_raw_bipolar_vals.append((np.array(temp), np.array([-1, -1, -1, -1, 1, -1, -1]), char))
				temp = []
			if char == "J":
				temp.append(1)
				input_raw_bipolar_vals.append((np.array(temp), np.array([-1, -1, -1, -1 ,-1 , 1, -1]), char))
				temp = []
			if char == "K":
				temp.append(1)
				input_raw_bipolar_vals.append((np.array(temp), np.array([-1, -1, -1, -1 , -1, -1, 1]), char))
				temp = []

	return input_raw_bipolar_vals

def initiateRandomWeights(num_letters):
	#Returns a 2D matrix containing random weights for corresponding letters input
	#return [np.random.random(size=64) for i in range(num_letters)]
	"""
	#with no bias included
	return [np.array([ 0.09613684,  0.7444444 ,  0.81008179,  0.63345552,  0.58498374,
        0.43993955,  0.02258163,  0.00242211,  0.83507948,  0.81062423,
        0.52761683,  0.01370335,  0.94794926,  0.56135518,  0.1749235 ,
        0.90688731,  0.44594739,  0.3408748 ,  0.73404635,  0.64486662,
        0.03122916,  0.33880711,  0.57368869,  0.8380178 ,  0.79718783,
        0.4785038 ,  0.55420333,  0.41066007,  0.79713952,  0.10389628,
        0.41225118,  0.02067077,  0.06286233,  0.58786257,  0.06844422,
        0.98260231,  0.99187569,  0.34883503,  0.05567674,  0.82242481,
        0.50231618,  0.82074436,  0.49733443,  0.29839185,  0.59879104,
        0.83768608,  0.36729334,  0.81345051,  0.77163585,  0.32977125,
        0.51070008,  0.31730635,  0.90149569,  0.32066479,  0.34860418,
        0.12416236,  0.27616768,  0.3711331 ,  0.54155122,  0.46624166,
        0.0480581 ,  0.56466401,  0.84692089]), np.array([ 0.12129291,  0.67755442,  0.56633312,  0.06938859,  0.23392232,
        0.91677042,  0.90495335,  0.70926657,  0.26633365,  0.8626366 ,
        0.83427849,  0.01777788,  0.13082407,  0.09720392,  0.23726451,
        0.24048832,  0.7084716 ,  0.66875243,  0.55322638,  0.76383061,
        0.1888914 ,  0.57651596,  0.2060502 ,  0.99222874,  0.04599787,
        0.67885739,  0.65782645,  0.58203992,  0.23328952,  0.71719166,
        0.40790656,  0.20420611,  0.15984885,  0.56922896,  0.36781449,
        0.31482722,  0.11148285,  0.41750684,  0.13891471,  0.82759549,
        0.0165307 ,  0.87212779,  0.24665933,  0.63656989,  0.57857278,
        0.4736606 ,  0.66299712,  0.09942109,  0.81043259,  0.36012799,
        0.04953583,  0.31233395,  0.97362937,  0.42289316,  0.82409287,
        0.4996023 ,  0.61008556,  0.67460757,  0.31251751,  0.16006014,
        0.02417734,  0.89874862,  0.51584097]), np.array([ 0.48659952,  0.29446315,  0.7654039 ,  0.08533479,  0.17284639,
        0.95830072,  0.05417926,  0.57499177,  0.09083716,  0.06859133,
        0.55309612,  0.56866539,  0.1699959 ,  0.57694163,  0.0715289 ,
        0.25015175,  0.92925136,  0.28269554,  0.83138558,  0.6007438 ,
        0.31068467,  0.26553917,  0.81893756,  0.74422851,  0.15828836,
        0.30045043,  0.09126182,  0.1281307 ,  0.46474405,  0.85189513,
        0.60663997,  0.491255  ,  0.38707164,  0.0495869 ,  0.11840691,
        0.72716101,  0.17114939,  0.49144867,  0.44199224,  0.26259666,
        0.02853737,  0.82438091,  0.50366646,  0.03788497,  0.32410293,
        0.64876504,  0.18363019,  0.57268341,  0.54067142,  0.86678407,
        0.50392298,  0.42248734,  0.24151611,  0.65909202,  0.64207718,
        0.30450787,  0.25037444,  0.32535516,  0.52818827,  0.53891807,
        0.35559575,  0.59032911,  0.22440028]), np.array([ 0.99427513,  0.25107925,  0.81197123,  0.22974204,  0.00618931,
        0.58534468,  0.77221058,  0.5636516 ,  0.66698079,  0.04697685,
        0.79505646,  0.03991469,  0.61342701,  0.63418747,  0.16903286,
        0.13282573,  0.38182809,  0.83166492,  0.15265065,  0.3860087 ,
        0.96371025,  0.58282439,  0.94459084,  0.77669617,  0.83246408,
        0.87274601,  0.40388851,  0.9078909 ,  0.56138902,  0.63390316,
        0.98045179,  0.6583834 ,  0.15475299,  0.66257471,  0.10629339,
        0.40572225,  0.68520896,  0.51332508,  0.52588618,  0.09608505,
        0.70199694,  0.769446  ,  0.17396875,  0.01515514,  0.23726996,
        0.34262582,  0.39805221,  0.14963003,  0.96764688,  0.86521627,
        0.20385523,  0.4865458 ,  0.39819857,  0.43554834,  0.27394738,
        0.2977009 ,  0.74796575,  0.06687452,  0.04202116,  0.49999941,
        0.00971419,  0.83861501,  0.34172123]), np.array([ 0.5346903 ,  0.51849378,  0.08341625,  0.01794064,  0.83593024,
        0.11597697,  0.54782072,  0.33828594,  0.64001543,  0.39659534,
        0.77530526,  0.23167696,  0.63963676,  0.66075162,  0.08301322,
        0.63344943,  0.58979459,  0.84150842,  0.36936741,  0.00125084,
        0.20102459,  0.24237582,  0.44495095,  0.63779221,  0.50616209,
        0.45105778,  0.58856973,  0.90628855,  0.38823283,  0.48987171,
        0.27511069,  0.70082823,  0.62883012,  0.1541005 ,  0.25773966,
        0.36481434,  0.40103001,  0.88571268,  0.79843917,  0.67821768,
        0.19012048,  0.1591649 ,  0.34395561,  0.48133267,  0.03468662,
        0.85021762,  0.22451778,  0.48775306,  0.05015702,  0.20417958,
        0.30521324,  0.17737563,  0.31227137,  0.39606626,  0.86522612,
        0.5009545 ,  0.00094075,  0.86145455,  0.16133759,  0.61297466,
        0.67130329,  0.9042013 ,  0.31804316]), np.array([ 0.62301521,  0.88029485,  0.29011063,  0.96032686,  0.33047169,
        0.13444793,  0.35078898,  0.68300867,  0.06384695,  0.13527384,
        0.21579857,  0.04211352,  0.94264859,  0.10531986,  0.66694255,
        0.71571834,  0.48875398,  0.77721993,  0.61614379,  0.97726175,
        0.08454338,  0.44007565,  0.89339406,  0.16360024,  0.05785807,
        0.56237707,  0.20391067,  0.10177349,  0.39514983,  0.40770889,
        0.31260232,  0.66524921,  0.39213844,  0.16355105,  0.54175319,
        0.65837815,  0.64479439,  0.28387146,  0.07725679,  0.84916376,
        0.11438519,  0.22521461,  0.01019387,  0.06062975,  0.60453186,
        0.22912171,  0.07885876,  0.64597794,  0.59043736,  0.90157016,
        0.81720614,  0.60050732,  0.01166279,  0.55367823,  0.68946845,
        0.25317782,  0.82488848,  0.97966552,  0.33588481,  0.72653184,
        0.32565536,  0.4760327 ,  0.91161357]), np.array([ 0.52028942,  0.02426738,  0.7706994 ,  0.10147987,  0.75432476,
        0.58825721,  0.56931267,  0.50994715,  0.55231356,  0.36330481,
        0.72242779,  0.05346557,  0.8569313 ,  0.81453576,  0.06113835,
        0.79602426,  0.91559958,  0.01718042,  0.25776942,  0.42733203,
        0.25035924,  0.6992264 ,  0.79686251,  0.80520221,  0.12818974,
        0.2693838 ,  0.03400877,  0.50923101,  0.40975307,  0.39190928,
        0.7637649 ,  0.69067526,  0.59529293,  0.45411856,  0.30407672,
        0.31033398,  0.82902468,  0.90657043,  0.0936028 ,  0.02021258,
        0.88540382,  0.05129931,  0.88459561,  0.19908477,  0.73434663,
        0.56249509,  0.10352285,  0.76022442,  0.12276443,  0.42529062,
        0.70038469,  0.41527868,  0.27541226,  0.14330406,  0.22337925,
        0.0896823 ,  0.29869862,  0.96539391,  0.81368778,  0.8382577 ,
        0.39890499,  0.58886833,  0.70223467])]
	"""
	#with bias included
	return [np.array([ 0.200031  ,  0.6564978 ,  0.30727236,  0.8790719 ,  0.53594995,
        0.08269671,  0.09135345,  0.44099527,  0.28506446,  0.4260204 ,
        0.55602184,  0.70298867,  0.35206066,  0.96370302,  0.1876633 ,
        0.12119019,  0.89865025,  0.5712232 ,  0.76536604,  0.98147786,
        0.96896673,  0.23396216,  0.95577582,  0.84955055,  0.30796005,
        0.92868751,  0.87347047,  0.17996198,  0.85824575,  0.1465126 ,
        0.81861012,  0.81166324,  0.23925567,  0.99352807,  0.55065275,
        0.37601159,  0.08775392,  0.9874705 ,  0.98332198,  0.02555897,
        0.5463691 ,  0.6319657 ,  0.30833959,  0.09120492,  0.50721113,
        0.06728787,  0.87682988,  0.2930267 ,  0.8624997 ,  0.78062791,
        0.23331899,  0.7647015 ,  0.34544118,  0.27108346,  0.27503876,
        0.46821772,  0.39824562,  0.88527705,  0.79691894,  0.70743665,
        0.08318339,  0.42570422,  0.04203867,  0.52758827]), np.array([ 0.83333216,  0.18428515,  0.91565304,  0.3139484 ,  0.29702509,
        0.15718391,  0.94908353,  0.33750395,  0.46948974,  0.41080438,
        0.68764028,  0.09367058,  0.10472744,  0.93711586,  0.6727104 ,
        0.66086738,  0.94586949,  0.85339246,  0.96243771,  0.86856104,
        0.71181211,  0.19329549,  0.80857198,  0.79489772,  0.07432303,
        0.86549519,  0.6857371 ,  0.36216138,  0.36786996,  0.44592491,
        0.56297754,  0.81154504,  0.92671658,  0.83606502,  0.80300957,
        0.87368558,  0.28255169,  0.6876632 ,  0.02006746,  0.75452515,
        0.16156414,  0.65508383,  0.90089467,  0.13250724,  0.54187497,
        0.85760537,  0.54807076,  0.49909118,  0.0169781 ,  0.88213973,
        0.88243925,  0.8196812 ,  0.85760997,  0.55146234,  0.92087431,
        0.23316407,  0.3713717 ,  0.30768395,  0.92481584,  0.9248966 ,
        0.04757217,  0.50174999,  0.63343459,  0.7467083 ]), np.array([ 0.50309615,  0.75091451,  0.11156774,  0.27548838,  0.85350404,
        0.77346875,  0.38982029,  0.51971241,  0.71103816,  0.63622755,
        0.13827962,  0.37178663,  0.43189567,  0.59677244,  0.0520603 ,
        0.58561116,  0.25627126,  0.46866951,  0.24123643,  0.99077437,
        0.06449412,  0.17433266,  0.85736023,  0.43539128,  0.17062974,
        0.64866375,  0.08641762,  0.94275555,  0.33200179,  0.22308388,
        0.53419438,  0.39655432,  0.03697593,  0.49738737,  0.9748559 ,
        0.31998581,  0.0459231 ,  0.36803423,  0.04811547,  0.71266683,
        0.67153986,  0.13952241,  0.06202841,  0.95858929,  0.60031323,
        0.8474732 ,  0.78796314,  0.36024985,  0.38347365,  0.76917579,
        0.58374934,  0.57718632,  0.10750111,  0.52496478,  0.281435  ,
        0.28009017,  0.89363664,  0.42407107,  0.02438536,  0.62201544,
        0.46061479,  0.26091072,  0.74801536,  0.31293022]), np.array([ 0.46549197,  0.02836949,  0.84879302,  0.45981056,  0.10808001,
        0.1822234 ,  0.90187497,  0.05939722,  0.69290096,  0.99718772,
        0.05626313,  0.94961402,  0.7741582 ,  0.54401208,  0.08230759,
        0.14705829,  0.3636315 ,  0.0155194 ,  0.79809348,  0.25917041,
        0.60702986,  0.70321838,  0.24824577,  0.85490265,  0.64968666,
        0.16316549,  0.02506123,  0.01136428,  0.35583474,  0.94133035,
        0.57126225,  0.5962052 ,  0.76672328,  0.00904544,  0.65747158,
        0.37403129,  0.36153685,  0.78550957,  0.9428798 ,  0.45241792,
        0.63733787,  0.32975542,  0.52087309,  0.76021033,  0.57146977,
        0.85436522,  0.42817045,  0.14248286,  0.88144141,  0.19222676,
        0.91890732,  0.30504473,  0.20795106,  0.51964686,  0.45468112,
        0.0718797 ,  0.69250096,  0.80993241,  0.83820253,  0.11926553,
        0.54059503,  0.6107484 ,  0.05547956,  0.04407457]), np.array([ 0.1453037 ,  0.7233392 ,  0.0207809 ,  0.26777411,  0.75078797,
        0.31941251,  0.99560922,  0.23052851,  0.0150386 ,  0.37531351,
        0.70749447,  0.45115079,  0.80213509,  0.44834725,  0.59482345,
        0.38411366,  0.84200183,  0.04139402,  0.81477909,  0.17320561,
        0.31861264,  0.78679634,  0.19690182,  0.81714   ,  0.58297532,
        0.63899518,  0.18591011,  0.18140973,  0.03334586,  0.66686063,
        0.86532463,  0.91503147,  0.50377089,  0.19412915,  0.15324084,
        0.72031241,  0.01654504,  0.60407329,  0.63088082,  0.18381046,
        0.78412462,  0.36591588,  0.36513294,  0.13194981,  0.44817391,
        0.06760898,  0.88385009,  0.58343917,  0.72804688,  0.4861945 ,
        0.8161413 ,  0.05883817,  0.59955284,  0.18393369,  0.60008144,
        0.00251036,  0.20835687,  0.11912323,  0.01420208,  0.93551804,
        0.09810644,  0.9932729 ,  0.04544616,  0.83892574]), np.array([ 0.19962506,  0.17315597,  0.99558572,  0.83245238,  0.78211769,
        0.5337445 ,  0.77540326,  0.41813105,  0.58481521,  0.86612091,
        0.31342606,  0.33411559,  0.58159944,  0.87764812,  0.53437005,
        0.78016388,  0.20192443,  0.61215113,  0.20277164,  0.17943642,
        0.13998555,  0.1966701 ,  0.1542015 ,  0.09860174,  0.71345453,
        0.15591852,  0.01247862,  0.82318938,  0.20900716,  0.93975443,
        0.59607471,  0.41253126,  0.6044115 ,  0.07064066,  0.88281374,
        0.61785948,  0.12401051,  0.43817884,  0.12810459,  0.98299742,
        0.32454016,  0.62291048,  0.14933436,  0.54114164,  0.68283919,
        0.73796291,  0.93125735,  0.30140775,  0.85427146,  0.66524906,
        0.78607233,  0.94678745,  0.87806342,  0.20582313,  0.08659356,
        0.94020638,  0.77097783,  0.65222345,  0.59293073,  0.60885433,
        0.35871684,  0.05802254,  0.64793799,  0.24297966]), np.array([ 0.83697346,  0.61428017,  0.20215532,  0.72089148,  0.17599989,
        0.51870129,  0.38942069,  0.42359147,  0.53581998,  0.92036651,
        0.22322116,  0.75519503,  0.00980164,  0.43211089,  0.41480561,
        0.91983371,  0.41748892,  0.31309107,  0.72287662,  0.92842914,
        0.32170004,  0.60597552,  0.99451679,  0.28597505,  0.4897739 ,
        0.33330326,  0.12850173,  0.08233832,  0.22266794,  0.90200449,
        0.37354587,  0.03608711,  0.0604363 ,  0.57683904,  0.28439862,
        0.78580051,  0.70613571,  0.64828474,  0.72658079,  0.35509583,
        0.48451861,  0.36274328,  0.84799561,  0.00611168,  0.070086  ,
        0.83261893,  0.41093729,  0.75452467,  0.64284274,  0.6981277 ,
        0.18879057,  0.21272044,  0.52510345,  0.45463242,  0.7547039 ,
        0.85281863,  0.76647913,  0.33854985,  0.13340753,  0.42897026,
        0.29998421,  0.55332021,  0.74271778,  0.16998294])]
	#"""
	#return [[0.45964223788566283, 0.7438684700083301, 0.01419097090501753, 0.16253784113837266, 0.6035847710835792, 0.5142340269495733, 0.1502597970507511, 0.09403096459258253, 0.31412992163718445, 0.6117365544724734, 0.38592709890781995, 0.8749534045535612, 0.6164900515839506, 0.9114507224308523, 0.39092601678115746, 0.44339344130919356, 0.7517181491949502, 0.6979353612900998, 0.970031051520059, 0.5203416791618557, 0.24857227022220807, 0.8579315763246633, 0.6948275218885401, 0.2180831287668168, 0.2396146217283005, 0.6344470695554214, 0.2503929437868013, 0.0730853039897984, 0.20634499865304679, 0.8421939748895273, 0.0315643327869648, 0.20339013601043476, 0.7718546551215472, 0.7203675588820115, 0.4415426603638761, 0.5413652002718911, 0.28330027813189496, 0.6851939034791154, 0.07998187783338595, 0.13402366392898224, 0.2107479640814629, 0.20756483152370808, 0.0533806643434348, 0.004085519233329893, 0.9831531727161544, 0.4294599288709777, 0.18600050081621866, 0.02583983548449531, 0.18075453480183845, 0.4188103421108239, 0.29435990812469925, 0.831205629157296, 0.3492883396974539, 0.21947415654092706, 0.9375087335003407, 0.5177310042444702, 0.37074343394076903, 0.2421371368387134, 0.8374415035550579, 0.5567261705183786, 0.2086762319492078, 0.9588505093846869, 0.19930350933990093], [0.0642485770249186, 0.5053195522708571, 0.23889262600653183, 0.9100584216292453, 0.28888039999319204, 0.7604731261893924, 0.2933999476469409, 0.2590506732527762, 0.18652462209436094, 0.4950152094805962, 0.7213937325998561, 0.14117920159755049, 0.9056129370997786, 0.9436195767422871, 0.21353448826170773, 0.13282431856777444, 0.4849644212979026, 0.43408176107696017, 0.6971227928424643, 0.20211355648563778, 0.8199126286083848, 0.8989727087915982, 0.3840858531201742, 0.5349374262965986, 0.14829144784924375, 0.3747640111468544, 0.4119555554209203, 0.9639358634855665, 0.17943060090684715, 0.8598504436788585, 0.5353387754405959, 0.3812956245113497, 0.9689551745290124, 0.6950471428165493, 0.8801560264215695, 0.11019864603737428, 0.4491971631198751, 0.13247033699386335, 0.8914592759413134, 0.9460396013383623, 0.08924120295716309, 0.13662296846579847, 0.538372702854762, 0.8687924009313077, 0.5660702556995963, 0.2156322306464009, 0.3675581879510209, 0.23617111700500482, 0.09554388392463042, 0.5860437999412086, 0.43311579089349317, 0.1488013995039017, 0.7671125861473495, 0.44663705336180914, 0.3930999582393613, 0.12347626634454656, 0.9709381730259311, 0.20236316053131853, 0.930758728115198, 0.6840834365245579, 0.9825367496832925, 0.12896977653716568, 0.9988454708478248], [0.6063816727320428, 0.9487460894445433, 0.5363775497354482, 0.29636816486432216, 0.659173080696896, 0.7488701205162086, 0.08400373235237601, 0.8316421262927807, 0.12156437354610794, 0.2802817622664767, 0.7353238754658622, 0.7325045616229389, 0.4702858812638486, 0.29229618493459897, 0.11833110415730008, 0.8574683217644061, 0.8371002696154324, 0.19246363465094307, 0.14430374490981934, 0.5094946893326685, 0.3649746252496746, 0.7065778476569694, 0.3793936018891757, 0.5342797039319072, 0.48043178931788655, 0.8649559667438411, 0.2581643524105851, 0.5803968218256585, 0.21421400386344536, 0.5515496678564826, 0.8675341413549909, 0.9551096519218819, 0.37469525232658374, 0.3894260943140211, 0.3103630991402533, 0.04378044420134597, 0.9751349812189423, 0.6474798767612033, 0.29037753831472946, 0.1328762261411236, 0.07332281024026066, 0.877292048148901, 0.9429834282332549, 0.7127995364148411, 0.3177058105311842, 0.14465599971554133, 0.9981543755601315, 0.14503176753680913, 0.4035173314534485, 0.38791719279470827, 0.5254230501902574, 0.11552198710315353, 0.06753364612939983, 0.23229648250188195, 0.7050289866711863, 0.21832539851343846, 0.4012035971280159, 0.016560918430483462, 0.5476047657580383, 0.9701322178299099, 0.04173038020533393, 0.4951572083192691, 0.27863816206741676], [0.6062864732919129, 0.6847402637125322, 0.7139223493215315, 0.28917288970203026, 0.28822836196665624, 0.11827528756727201, 0.6457422475239638, 0.5566454663914301, 0.11648503931005671, 0.0916161130719857, 0.6827940583207825, 0.23718505719722605, 0.3470629533921421, 0.617141394303108, 0.4025606296912936, 0.866057565052699, 0.7633371769789287, 0.2840552706716071, 0.19209546279440393, 0.29552293192570045, 0.8781711338201177, 0.40529308845969614, 0.9113085192075188, 0.7686277867403818, 0.18134725640676808, 0.8860247808973111, 0.8133742122530756, 0.18658131916245912, 0.4117569014393132, 0.7246362157138403, 0.3207172298794696, 0.9203104370376299, 0.5271765250013235, 0.00024353643491459298, 0.20068641848565816, 0.4614146837185048, 0.48063013529492216, 0.3180850315332353, 0.0754884516109392, 0.2435911478368854, 0.8138927606301142, 0.2823498562905218, 0.04758962177513293, 0.22495826101815541, 0.5427456400721878, 0.7700114787584084, 0.04109056955923418, 0.5613256469734825, 0.7972444332325876, 0.22017154294142038, 0.5956788185433057, 0.8535910270611857, 0.6417630359611151, 0.946600418664711, 0.20758477600864245, 0.6154961176835776, 0.5687912388636119, 0.8564918900389765, 0.9721939511907107, 0.8321774265186642, 0.8778336823197243, 0.42370063360172106, 0.2669583133406831], [0.09953370534901407, 0.08936734144638203, 0.28926551000335843, 0.7918956298848394, 0.8332881216769407, 0.6159443030347839, 0.008629296474171988, 0.28544336038338813, 0.7323594782299157, 0.1008884633701459, 0.7493119382322115, 0.7588442706699655, 0.9226867798874108, 0.4332336309790037, 0.22742235990311588, 0.289792808892281, 0.7053114898038427, 0.8072412338272392, 0.8784289095349187, 0.503560590655793, 0.19646902531299426, 0.1752669611778095, 0.03893521194476868, 0.02846914199662831, 0.006657213604064682, 0.888451669263458, 0.901329540276293, 0.39050490246094083, 0.4564804516698179, 0.5155632515001572, 0.24419317326377632, 0.9058790935094154, 0.011687647909185639, 0.37859128576059276, 0.4128935730620441, 0.32001438976189645, 0.7843933034136409, 0.23373805122017377, 0.7214959019423725, 0.3415973412734099, 0.5399600115695108, 0.5174460566447143, 0.3341767752670626, 0.1799602611944625, 0.8549433653809322, 0.5220784806025129, 0.6300006891999127, 0.8075946437764506, 0.6499208635585625, 0.36419506659420264, 0.6583858730100357, 0.7441038909053777, 0.8936228755266231, 0.28595345311422715, 0.7103962879335399, 0.3117029054245557, 0.927376477881097, 0.22360530429768788, 0.11103324898695055, 0.7070255213091384, 0.7563783668781224, 0.9152844976025609, 0.5291034220871157], [0.9396566725739011, 0.7298772394066401, 0.9086097585360129, 0.5155010675169465, 0.7385155378451493, 0.758871406000114, 0.9925306231872639, 0.7533804534163129, 0.29472365350611796, 0.5429905665223026, 0.5598711456381826, 0.48278046288194865, 0.24564363880737028, 0.4227790440314141, 0.7126108378602252, 0.9554268782026342, 0.9798057754748644, 0.3956336202084384, 0.4092474711691453, 0.35780673214662495, 0.8252529087606159, 0.744289516312839, 0.7568089892751807, 0.37073773763952367, 0.37003534976678365, 0.6026252808867949, 0.6037592288571569, 0.1591736504156549, 0.8109079010275143, 0.5835056133830766, 0.746481450263152, 0.9789835320725584, 0.9205408974665001, 0.28148531298130774, 0.6946153072778094, 0.6596951145251986, 0.29383248908694537, 0.38958566859452337, 0.2382325566636132, 0.43506537685186153, 0.757082122344402, 0.32691693887943396, 0.5378496956981896, 0.0018141244881588747, 0.8183511498506276, 0.5402701250169782, 0.8560369439547509, 0.9357438694478445, 0.22269870176437334, 0.25286947423607486, 0.19602066631709825, 0.35544265341031966, 0.7539391523232062, 0.4857742616916326, 0.10391952134742255, 0.5712731742154882, 0.05052840744337028, 0.735189502760353, 0.05789963917048779, 0.3012218719901075, 0.6847115066298017, 0.3484894955406107, 0.6784131799881838], [0.07339203519730697, 0.962454661229592, 0.8147987059594551, 0.8290527163653261, 0.4960780569107007, 0.15881857573161906, 0.9503458828984338, 0.12794585578298612, 0.10059134450826801, 0.23519544578441542, 0.04484846352517302, 0.8083389838210631, 0.10713561127970495, 0.716764108282597, 0.19797577117183118, 0.694594303952375, 0.5318706298260466, 0.45473745580672476, 0.7952822011272243, 0.28198827996847475, 0.24676111817750657, 0.9742864188422881, 0.50980241632294, 0.5458553705287906, 0.8887276677656802, 0.5357447314097628, 0.1752875819371258, 0.2546894855266584, 0.09514066298183477, 0.8194562390785657, 0.6129356350107448, 0.9752847802646755, 0.46058140880588316, 0.21884775184618022, 0.36980197747133614, 0.9145727707011597, 0.8595967988272983, 0.22688673192541764, 0.8295528990614147, 0.061845556570329974, 0.413337656517477, 0.8695628434692051, 0.9437102852868724, 0.02203480871188135, 0.8874471101428361, 0.31107244546625723, 0.28675893665251806, 0.700811314687398, 0.39262014557121716, 0.3418239123079828, 0.06936038701381508, 0.5932627955869315, 0.08947025918570062, 0.22809539818977065, 0.17157594921500396, 0.9792982614096246, 0.4511444883618162, 0.28769282114776384, 0.24794858069079573, 0.07121251298740539, 0.6215163283203345, 0.49015071870944293, 0.6056351431307393]]

#output1 = lambda y: -1 if y < 0 else 1

def output(y, threshold):
	if y < threshold:
		return -1
	else:
		return 1


def training(training_set, weights, alpha, threshold):
	iterations = 0
	
	while True:

		error_count = 0
		iterations += 1

		for i in range(len(training_set)):
			#going through each input
			target = training_set[i][1]

			x = 0

			for j in range(len(training_set)):
				#going through the training set for each input
				xw = np.dot(training_set[i][0], weights[j]) 

				y_in = output(xw, threshold)

				error = target[x] - y_in
				
				x += 1

				if error != 0:
					#print "not same!"
					weights[j] +=  alpha  * error * training_set[i][0]
					error_count += 1
				
		if error_count == 0:
			break

	return weights, iterations


def testing(data, weight, noise, threshold, a):
	testing_data = copy.deepcopy(data)

	total_error = { "A": {"A": 0, "B": 0, "C": 0, "D": 0, "E": 0, "J":0 ,"K":0}, 
					"B": {"A": 0, "B": 0, "C": 0, "D": 0, "E": 0, "J":0 ,"K":0}, 
					"C": {"A": 0, "B": 0, "C": 0, "D": 0, "E": 0, "J":0 ,"K":0}, 
					"D": {"A": 0, "B": 0, "C": 0, "D": 0, "E": 0, "J":0 ,"K":0}, 
					"E": {"A": 0, "B": 0, "C": 0, "D": 0, "E": 0, "J":0 ,"K":0}, 
					"J":{"A": 0, "B": 0, "C": 0, "D": 0, "E": 0, "J":0 ,"K":0} ,
					"K":{"A": 0, "B": 0, "C": 0, "D": 0, "E": 0, "J":0 ,"K":0}}


	if noise:
		#displ_val = [[56, 54], [51, 6], [27, 12], [38, 47], [7, 14], [22, 5], [59, 55]]
		#displ_val = np.random.randint(0, 64, size=noise)
		for x in range(len(testing_data)):
			#a list of amount of noise randomly chosen in the input
			displ_val = np.random.randint(0, 64, size=noise)

			for i in displ_val:
				#print i, testing_data[x][0][i]
				if testing_data[x][0][i] == -1:
					testing_data[x][0][i] = 1
				else:
					testing_data[x][0][i] = -1


	
	for x, target, letter in testing_data:
		#going through each input
		#print "Testing letter: ", letter

		for j in range(len(testing_data)):
			#xw = np.dot(testing_data[j][0], weight[j])
			xw = np.dot(testing_data[j][0], weight[j])
			y_in = output(xw, threshold)
			
			error = target[j] - y_in

			if error != 0:
				#print "Letter ", testing_data[j][2], " is not ", letter
				total_error[letter][testing_data[j][2]] += 1
			else:
				#print "Letter ", testing_data[j][2], " is  ", letter
				pass

	return total_error



def report(result, noise):

	print "Noise: ", noise
	x = PrettyTable(["","A", "B", "C", "D", "E", "J", "K"])

	for i in result:
		x.add_row([i, result[i]["A"], result[i]["B"], result[i]["C"], result[i]["D"], result[i]["E"], result[i]["J"], result[i]["K"]])


	print x

	

if __name__ == '__main__':
	#get the training data
	training_data = extractData()

	#get the weights for the data
	weights = initiateRandomWeights(7)

	#print "Initial weights: ", weights
	learning_rate = 0.1
	threshold = 0.5
	noise = 5


	final_weights, iterations = training(training_data, weights, learning_rate, threshold)

	#print "Final weights: ", final_weights
	
	print "iterations to converge: ", iterations

	total_error = testing(training_data, final_weights, noise, threshold, learning_rate)

	report(total_error, noise)

	total_error = testing(training_data, final_weights, 10, threshold, learning_rate)

	report(total_error, 10)

	total_error = testing(training_data, final_weights, 15, threshold, learning_rate)

	report(total_error, 15)

	total_error = testing(training_data, final_weights, 20, threshold, learning_rate)

	report(total_error, 20)
